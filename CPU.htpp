; Function to convert a binary string to an index number
func int BinaryToIndex(str binaryStr)
{
int bit
int decimal := 0
int len := StrLen(binaryStr)
Loop, % len
{
bit := INT(SubStr(binaryStr, A_Index, 1))
decimal := decimal * 2 + bit
}
; Add 1 to the decimal value to get the index number
return decimal + 1
}



main:



arr int registers

arr registers .= 0
arr registers .= 0
arr registers .= 0
arr registers .= 0
arr registers .= 0
arr registers .= 0
arr registers .= 0
arr registers .= 0
arr registers .= 0
arr registers .= 0
arr registers .= 0
arr registers .= 0
arr registers .= 0
arr registers .= 0
arr registers .= 0
arr registers .= 0

arr int memoryAddress

Loop, 256
{
arr memoryAddress .= 0
}
MsgBox, % memoryAddress[0]

;~ 16 instructions
;~ 16 regs
;~ 256 memory addreses
;~ 0000 0000 00000000
	;~ 00 00


;~ regs = r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16 (anything else is a value)
;~ store, 10, 10000000
;~ store, r2, [10000000]
;~ store, r2 r1
;~ add, r1 1
;~ print, r1
;~ ; we will gte 11

str ASMcode := "store, 10, 10000000`nstore, r2, [10000000]`nstore, r2 r1`nadd, r1 1`nprint, r1"

ASMcode := StrReplace(ASMcode, Chr(13), "")

str ASMcodeOut1
Loop, Parse, ASMcode, `n , `r
{
ASMcodeOut1 .= Trim(A_LoopField) . "`n"
}

StringTrimRight, ASMcode, ASMcodeOut1, 1


; dec vars
str str123
str str1
str str2
str str1_1
str str1_2






Loop, Parse, ASMcode, `n, `r
{
if (SubStr(StrLower(A_LoopField), 1, 7) = "store, ")
{
StringTrimLeft, str123, A_LoopField, 7

str1 := Trim(StrSplit(str123, ",", 1))
str2 := Trim(StrSplit(str123, ",", 2))

if (InStr(str1, "r"))
{

}
else
{

}

str1_1 := StrSplit(str1, " ", 1)
str1_2 := StrSplit(str1, " ", 2)
MsgBox, % str1_1
MsgBox, % str1_2

MsgBox, % str2


if (str2 = "")
{
MsgBox, % "str2 is empty"
BinaryToIndex(str2)

}



}
}

